<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Heures Supplémentaires</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/@mui/material@5.15.4/umd/material-ui.development.js"></script>
    <script src="https://unpkg.com/@emotion/react@11.11.3/dist/emotion-react.umd.min.js"></script>
    <script src="https://unpkg.com/@emotion/styled@11.11.0/dist/emotion-styled.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
    <style>
        .calendar-container {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        const { 
            Container, Box, Typography, Button, Grid, Paper,
            Dialog, DialogTitle, DialogContent, DialogActions,
            IconButton, List, ListItem, ListItemText, ListItemSecondaryAction,
            RadioGroup, Radio, FormControlLabel, FormControl, FormLabel,
            Select, MenuItem, TextField, Alert, CreateIcon, PictureAsPdfIcon,
            Switch, ChevronLeftIcon, ChevronRightIcon
        } = MaterialUI;

        const monthNames = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 
                          'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
        const dayNames = ['L', 'M', 'M', 'J', 'V'];

        const TypeSelector = ({ value, onChange, error }) => (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                <Typography variant="subtitle1" sx={{ mb: 1 }}>
                    Type de remplacement *
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>
                    <Button
                        className={`type-button ${value === 'DevoirsFaits' ? 'selected' : ''}`}
                        variant={value === 'DevoirsFaits' ? 'contained' : 'outlined'}
                        onClick={() => onChange('DevoirsFaits')}
                    >
                        Devoirs faits
                    </Button>
                    <Button
                        className={`type-button ${value === 'RCD' ? 'selected' : ''}`}
                        variant={value === 'RCD' ? 'contained' : 'outlined'}
                        onClick={() => onChange('RCD')}
                    >
                        RCD
                    </Button>
                    <Button
                        className={`type-button ${value === 'Autre' ? 'selected' : ''}`}
                        variant={value === 'Autre' ? 'contained' : 'outlined'}
                        onClick={() => onChange('Autre')}
                    >
                        Autre
                    </Button>
                </Box>
                {error && (
                    <Typography color="error" variant="caption">
                        {error}
                    </Typography>
                )}
            </Box>
        );

        const ReplacementDialog = React.memo(({ open, onClose, currentDate, initialData, onSave }) => {
            const [formData, setFormData] = React.useState({
                type: 'DevoirsFaits',
                duration: 1,
                teacher: '',
                class: '',
                file: null,
                description: ''
            });

            const [error, setError] = React.useState('');

            // Réinitialiser le formulaire à chaque ouverture
            React.useEffect(() => {
                if (open) {
                    // Si on a des données initiales pour cette date, on les utilise
                    if (initialData && Object.keys(initialData).length > 0) {
                        setFormData(initialData);
                    } else {
                        // Sinon on réinitialise le formulaire
                        setFormData({
                            type: 'DevoirsFaits',
                            duration: 1,
                            teacher: '',
                            class: '',
                            file: null,
                            description: ''
                        });
                    }
                    setError('');
                }
            }, [open, initialData]);

            const handleSave = () => {
                if (!formData.type) {
                    setError('Veuillez sélectionner un type');
                    return;
                }
                if (formData.type === 'RCD' && (!formData.teacher || !formData.class)) {
                    setError('Veuillez remplir tous les champs');
                    return;
                }
                onSave(formData);
                onClose();
            };

            return (
                <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
                    <DialogTitle>
                        Informations de remplacement
                    </DialogTitle>
                    <DialogContent>
                        <Box sx={{ mt: 2 }}>
                            <TypeSelector
                                value={formData.type}
                                onChange={(type) => setFormData(prev => ({ ...prev, type }))}
                                error={error}
                            />

                            {formData.type === 'RCD' && (
                                <Box sx={{ mt: 2 }}>
                                    <TextField
                                        fullWidth
                                        label="Professeur remplacé"
                                        value={formData.teacher}
                                        onChange={(e) => setFormData(prev => ({ ...prev, teacher: e.target.value }))}
                                        margin="normal"
                                    />
                                    <TextField
                                        fullWidth
                                        label="Classe"
                                        value={formData.class}
                                        onChange={(e) => setFormData(prev => ({ ...prev, class: e.target.value }))}
                                        margin="normal"
                                    />
                                </Box>
                            )}

                            {formData.type === 'DevoirsFaits' && (
                                <Box sx={{ mt: 2 }}>
                                    <input
                                        type="file"
                                        onChange={(e) => setFormData(prev => ({ ...prev, file: e.target.files[0] }))}
                                        style={{ display: 'none' }}
                                        id="file-upload"
                                    />
                                    <label htmlFor="file-upload">
                                        <Button
                                            variant="outlined"
                                            component="span"
                                            fullWidth
                                        >
                                            {formData.file ? formData.file.name : 'Ajouter un fichier'}
                                        </Button>
                                    </label>
                                </Box>
                            )}

                            {formData.type === 'Autre' && (
                                <TextField
                                    fullWidth
                                    label="Description"
                                    value={formData.description}
                                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                                    margin="normal"
                                    multiline
                                    rows={2}
                                />
                            )}

                            <FormControl fullWidth sx={{ mt: 2 }}>
                                <FormLabel>Durée</FormLabel>
                                <Select
                                    value={formData.duration}
                                    onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}
                                >
                                    <MenuItem value={1}>1 heure</MenuItem>
                                    <MenuItem value={2}>2 heures</MenuItem>
                                </Select>
                            </FormControl>
                        </Box>
                    </DialogContent>
                    <DialogActions>
                        <Button onClick={onClose}>Annuler</Button>
                        <Button onClick={handleSave} color="primary">
                            Sauvegarder
                        </Button>
                    </DialogActions>
                </Dialog>
            );
        });

        const Calendar = ({ selectedDates, onDateSelect, currentMonth, onMonthChange }) => {
            const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();
            const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1).getDay();
            
            // Jours de la semaine sans samedi et dimanche
            const days = ['L', 'M', 'M', 'J', 'V'];

            return (
                <Box>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                        <IconButton onClick={() => onMonthChange(-1)}>
                            <ChevronLeftIcon />
                        </IconButton>
                        <Typography variant="h6">
                            {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}
                        </Typography>
                        <IconButton onClick={() => onMonthChange(1)}>
                            <ChevronRightIcon />
                        </IconButton>
                    </Box>
                    <Grid container spacing={1} className="calendar-grid">
                        {days.map(day => (
                            <Grid item xs={12/5} key={day}>
                                <Typography align="center" variant="subtitle2">
                                    {day}
                                </Typography>
                            </Grid>
                        ))}
                        {Array.from({ length: (firstDayOfMonth === 0 ? 5 : firstDayOfMonth - 1) }).map((_, index) => (
                            <Grid item xs={12/5} key={`empty-${index}`}>
                                <Box className="calendar-day" />
                            </Grid>
                        ))}
                        {Array.from({ length: daysInMonth }).map((_, index) => {
                            const day = index + 1;
                            const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);
                            const dayOfWeek = date.getDay();
                            
                            // Ne pas afficher samedi (6) et dimanche (0)
                            if (dayOfWeek === 6 || dayOfWeek === 0) {
                                return null;
                            }

                            const dateStr = day.toString().padStart(2, '0');
                            const isSelected = selectedDates.includes(dateStr);
                            return (
                                <Grid item xs={12/5} key={day}>
                                    <Button
                                        variant={isSelected ? "contained" : "outlined"}
                                        onClick={() => onDateSelect(dateStr)}
                                        color={isSelected ? "primary" : "inherit"}
                                        fullWidth
                                        className="calendar-day"
                                        sx={{ 
                                            minWidth: 0,
                                            p: { xs: 1, sm: 2 }
                                        }}
                                    >
                                        {day}
                                    </Button>
                                </Grid>
                            );
                        })}
                    </Grid>
                </Box>
            );
        };

        const DateSelection = ({
            selectedDates,
            handleDateSelect,
            currentMonth,
            replacementInfo
        }) => {
            const daysInMonth = new Date(
                currentMonth.getFullYear(),
                currentMonth.getMonth() + 1,
                0
            ).getDate();

            return (
                <Box>
                    <Typography variant="h6" gutterBottom>
                        Sélection des dates
                    </Typography>
                    <Grid container spacing={1}>
                        {[...Array(daysInMonth)].map((_, index) => {
                            const day = index + 1;
                            const isSelected = selectedDates.includes(day.toString());
                            
                            return (
                                <Grid item key={day}>
                                    <Button
                                        variant={isSelected ? "contained" : "outlined"}
                                        onClick={() => handleDateSelect(day.toString())}
                                        sx={{ minWidth: '40px' }}
                                    >
                                        {day}
                                    </Button>
                                </Grid>
                            );
                        })}
                    </Grid>
                </Box>
            );
        };

        const DateSelectionWithCalendar = ({ 
            selectedDates, 
            handleDateSelect, 
            currentMonth, 
            handleMonthChange,
            replacementInfo 
        }) => (
            <Box className="calendar-container" sx={{ 
                display: 'flex', 
                gap: 4,
                flexDirection: { xs: 'column', sm: 'row' }
            }}>
                <Box sx={{ flex: 1 }}>
                    <Calendar 
                        selectedDates={selectedDates}
                        onDateSelect={handleDateSelect}
                        currentMonth={currentMonth}
                        onMonthChange={handleMonthChange}
                    />
                </Box>
                <Box sx={{ 
                    flex: 1,
                    maxHeight: { xs: '200px', sm: 'none' },
                    overflowY: 'auto'
                }}>
                    <Typography variant="h6" gutterBottom>
                        Séances sélectionnées
                    </Typography>
                    <List>
                        {selectedDates.map((date, index) => (
                            <ListItem 
                                key={date}
                                sx={{
                                    mb: 1,
                                    backgroundColor: 'white',
                                    borderRadius: '8px',
                                    border: '1px solid #e0e0e0',
                                    position: 'relative',
                                    '&:hover': {
                                        backgroundColor: '#f5f5f5'
                                    }
                                }}
                            >
                                <Box
                                    sx={{
                                        position: 'absolute',
                                        left: 0,
                                        top: 0,
                                        bottom: 0,
                                        width: '4px',
                                        backgroundColor: '#1976d2',
                                        borderTopLeftRadius: '8px',
                                        borderBottomLeftRadius: '8px'
                                    }}
                                />
                                <Box sx={{ pl: 2 }}>
                                    <Typography 
                                        variant="subtitle1" 
                                        sx={{ 
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: 1
                                        }}
                                    >
                                        <span style={{ 
                                            backgroundColor: '#1976d2',
                                            color: 'white',
                                            padding: '2px 8px',
                                            borderRadius: '12px',
                                            fontSize: '0.9em'
                                        }}>
                                            Séance {index + 1}
                                        </span>
                                        {date} {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}
                                    </Typography>
                                    <Typography 
                                        variant="body2" 
                                        color="textSecondary"
                                        sx={{ mt: 0.5 }}
                                    >
                                        {replacementInfo[date]?.type === 'Autre' 
                                            ? `${replacementInfo[date].type} - ${replacementInfo[date].description}`
                                            : replacementInfo[date]?.type || 'Type non défini'}
                                        {replacementInfo[date]?.duration 
                                            ? ` • ${replacementInfo[date].duration} heure${replacementInfo[date].duration > 1 ? 's' : ''}`
                                            : ' • 1 heure'}
                                    </Typography>
                                </Box>
                                <ListItemSecondaryAction>
                                    <IconButton 
                                        onClick={() => handleDateSelect(date)}
                                        size="small"
                                    >
                                        ×
                                    </IconButton>
                                </ListItemSecondaryAction>
                            </ListItem>
                        ))}
                    </List>
                </Box>
            </Box>
        );

        const SlotSelection = ({ 
            selectedDates, 
            selectedSlots, 
            handleSlotSelect, 
            replacementInfo,
            timeSlots,
            onEditSession 
        }) => (
            <Box>
                {selectedDates.map((date, index) => (
                    <Paper key={date} sx={{ p: 2, mb: 2 }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                            <Typography variant="h6">
                                Séance {index + 1} - {date} {monthNames[new Date().getMonth()]}
                            </Typography>
                            <Button 
                                variant="outlined" 
                                size="small"
                                onClick={() => onEditSession(date)}
                            >
                                Modifier
                            </Button>
                        </Box>
                        <Box mb={2}>
                            <Typography variant="subtitle1" gutterBottom>
                                Type : {replacementInfo[date]?.type}
                                {replacementInfo[date]?.duration && ` • ${replacementInfo[date].duration} heure(s)`}
                            </Typography>
                            {replacementInfo[date]?.type === 'RCD' && (
                                <>
                                    <Typography variant="body2">
                                        Professeur : {replacementInfo[date]?.teacher}
                                    </Typography>
                                    <Typography variant="body2">
                                        Classe : {replacementInfo[date]?.class}
                                    </Typography>
                                </>
                            )}
                            {replacementInfo[date]?.type === 'DevoirsFaits' && replacementInfo[date]?.file && (
                                <Typography variant="body2">
                                    Fichier joint : {replacementInfo[date].file.name}
                                </Typography>
                            )}
                        </Box>
                        <Box mb={2}>
                            <Typography variant="subtitle1">Matin</Typography>
                            <Grid container spacing={1}>
                                {timeSlots.morning.map(slot => (
                                    <Grid item key={slot}>
                                        <Button
                                            variant={(selectedSlots[date] || []).includes(slot) ? "contained" : "outlined"}
                                            onClick={() => handleSlotSelect(date, slot)}
                                            color={(selectedSlots[date] || []).includes(slot) ? "primary" : "inherit"}
                                        >
                                            {slot}
                                        </Button>
                                    </Grid>
                                ))}
                            </Grid>
                        </Box>
                        <Box>
                            <Typography variant="subtitle1">Après-midi</Typography>
                            <Grid container spacing={1}>
                                {timeSlots.afternoon.map(slot => (
                                    <Grid item key={slot}>
                                        <Button
                                            variant={(selectedSlots[date] || []).includes(slot) ? "contained" : "outlined"}
                                            onClick={() => handleSlotSelect(date, slot)}
                                            color={(selectedSlots[date] || []).includes(slot) ? "primary" : "inherit"}
                                        >
                                            {slot}
                                        </Button>
                                    </Grid>
                                ))}
                            </Grid>
                        </Box>
                    </Paper>
                ))}
            </Box>
        );

        const SignatureCanvas = React.memo(({ onSave }) => {
            const canvasRef = React.useRef(null);
            const [isDrawing, setIsDrawing] = React.useState(false);

            React.useEffect(() => {
                const canvas = canvasRef.current;
                const ctx = canvas.getContext('2d');
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 2;
            }, []);

            const startDrawing = (e) => {
                const canvas = canvasRef.current;
                const ctx = canvas.getContext('2d');
                const rect = canvas.getBoundingClientRect();
                ctx.beginPath();
                ctx.moveTo(
                    e.clientX - rect.left,
                    e.clientY - rect.top
                );
                setIsDrawing(true);
            };

            const draw = (e) => {
                if (!isDrawing) return;
                const canvas = canvasRef.current;
                const ctx = canvas.getContext('2d');
                const rect = canvas.getBoundingClientRect();
                ctx.lineTo(
                    e.clientX - rect.left,
                    e.clientY - rect.top
                );
                ctx.stroke();
            };

            const stopDrawing = () => {
                if (isDrawing) {
                    setIsDrawing(false);
                    onSave(canvasRef.current.toDataURL());
                }
            };

            const clearCanvas = () => {
                const canvas = canvasRef.current;
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                onSave(null);
            };

            return (
                <Box>
                    <canvas
                        ref={canvasRef}
                        width={300}
                        height={150}
                        style={{
                            border: '1px solid #ccc',
                            touchAction: 'none'
                        }}
                        onMouseDown={startDrawing}
                        onMouseMove={draw}
                        onMouseUp={stopDrawing}
                        onMouseOut={stopDrawing}
                    />
                    <Button onClick={clearCanvas} size="small">
                        Effacer
                    </Button>
                </Box>
            );
        });

        const SignatureDialog = React.memo(({ open, onClose, onSave }) => {
            const [signatureMethod, setSignatureMethod] = React.useState('draw');
            const [drawnSignature, setDrawnSignature] = React.useState(null);
            const [uploadedSignature, setUploadedSignature] = React.useState(null);

            const handleSignatureUpload = (event) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        setUploadedSignature(e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            };

            const handleSave = () => {
                const signature = signatureMethod === 'draw' ? drawnSignature : uploadedSignature;
                if (signature) {
                    onSave(signature);
                    localStorage.setItem('savedSignature', signature);
                    onClose();
                }
            };

            return (
                <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
                    <DialogTitle>Signature</DialogTitle>
                    <DialogContent>
                        <FormControl component="fieldset">
                            <RadioGroup
                                value={signatureMethod}
                                onChange={(e) => setSignatureMethod(e.target.value)}
                            >
                                <FormControlLabel
                                    value="draw"
                                    control={<Radio />}
                                    label="Dessiner la signature"
                                />
                                <FormControlLabel
                                    value="upload"
                                    control={<Radio />}
                                    label="Utiliser une signature sauvegardée"
                                />
                            </RadioGroup>
                        </FormControl>

                        {signatureMethod === 'draw' ? (
                            <SignatureCanvas onSave={setDrawnSignature} />
                        ) : (
                            <Box sx={{ mt: 2 }}>
                                <input
                                    type="file"
                                    accept="image/*"
                                    onChange={handleSignatureUpload}
                                    style={{ display: 'none' }}
                                    id="signature-upload"
                                />
                                <label htmlFor="signature-upload">
                                    <Button
                                        variant="outlined"
                                        component="span"
                                    >
                                        Choisir une image
                                    </Button>
                                </label>
                                {uploadedSignature && (
                                    <Box sx={{ mt: 2 }}>
                                        <img
                                            src={uploadedSignature}
                                            alt="Signature"
                                            style={{ maxWidth: 300, maxHeight: 150 }}
                                        />
                                    </Box>
                                )}
                            </Box>
                        )}
                    </DialogContent>
                    <DialogActions>
                        <Button onClick={onClose}>Annuler</Button>
                        <Button onClick={handleSave} color="primary">
                            Sauvegarder
                        </Button>
                    </DialogActions>
                </Dialog>
            );
        });

        const Summary = React.memo(({
            selectedDates,
            selectedSlots,
            replacementInfo,
            generatePDF,
            teacherSignature,
            onSignatureChange
        }) => {
            const [signatureDialogOpen, setSignatureDialogOpen] = React.useState(false);

            return (
                <Box>
                    <Typography variant="h6" gutterBottom>Récapitulatif</Typography>
                    {selectedDates.map((date, index) => (
                        <Paper key={date} sx={{ p: 2, mb: 2 }}>
                            <Typography variant="subtitle1">
                                Séance {index + 1} - {date} {monthNames[new Date().getMonth()]}
                            </Typography>
                            <Typography>
                                Créneaux : {(selectedSlots[date] || []).join(', ')}
                            </Typography>
                            {replacementInfo[date] && (
                                <>
                                    <Typography>
                                        Type : {replacementInfo[date].type}
                                    </Typography>
                                    <Typography>
                                        Durée : {replacementInfo[date].duration} heure(s)
                                    </Typography>
                                    {replacementInfo[date].type === 'RCD' && (
                                        <>
                                            <Typography>
                                                Professeur remplacé : {replacementInfo[date].teacher}
                                            </Typography>
                                            <Typography>
                                                Classe : {replacementInfo[date].class}
                                            </Typography>
                                        </>
                                    )}
                                    {replacementInfo[date].type === 'DevoirsFaits' && replacementInfo[date].file && (
                                        <Typography>
                                            Fichier joint : {replacementInfo[date].file.name}
                                        </Typography>
                                    )}
                                </>
                            )}
                        </Paper>
                    ))}
                    <Box sx={{ mt: 2, display: 'flex', gap: 2, flexDirection: 'column' }}>
                        <Button
                            variant="outlined"
                            onClick={() => setSignatureDialogOpen(true)}
                        >
                            {teacherSignature ? "Modifier la signature" : "Ajouter une signature"}
                        </Button>
                        
                        <Button
                            variant="contained"
                            color="primary"
                            onClick={generatePDF}
                            disabled={!teacherSignature}
                        >
                            Générer le PDF
                        </Button>
                    </Box>

                    <SignatureDialog
                        open={signatureDialogOpen}
                        onClose={() => setSignatureDialogOpen(false)}
                        onSave={(signature) => {
                            onSignatureChange(signature);
                            localStorage.setItem('teacherSignature', signature);
                        }}
                    />
                </Box>
            );
        });

        const normalizeText = (text) => {
            return text
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '');
        };

        const TeacherInfo = ({ onSubmit }) => {
            const [formData, setFormData] = React.useState({
                lastName: '',
                firstName: '',
                isPacte: true  // Pacte activé par défaut
            });
            const [errors, setErrors] = React.useState({});

            const handleSubmit = () => {
                const newErrors = {};
                if (!formData.lastName.trim()) newErrors.lastName = 'Le nom est requis';
                if (!formData.firstName.trim()) newErrors.firstName = 'Le prénom est requis';
                
                if (Object.keys(newErrors).length > 0) {
                    setErrors(newErrors);
                    return;
                }
                
                onSubmit(formData);
            };

            return (
                <Container maxWidth="sm" sx={{ mt: 4 }}>
                    <Paper elevation={3} sx={{ p: 3 }}>
                        <Typography variant="h5" gutterBottom align="center">
                            Informations de l'enseignant
                        </Typography>
                        <Box component="form" sx={{ display: 'flex', flexDirection: 'column', gap: 3, mt: 2 }}>
                            <TextField
                                label="Nom"
                                value={formData.lastName}
                                onChange={(e) => {
                                    setFormData(prev => ({ ...prev, lastName: e.target.value }));
                                    setErrors(prev => ({ ...prev, lastName: '' }));
                                }}
                                error={!!errors.lastName}
                                helperText={errors.lastName}
                                fullWidth
                            />
                            <TextField
                                label="Prénom"
                                value={formData.firstName}
                                onChange={(e) => {
                                    setFormData(prev => ({ ...prev, firstName: e.target.value }));
                                    setErrors(prev => ({ ...prev, firstName: '' }));
                                }}
                                error={!!errors.firstName}
                                helperText={errors.firstName}
                                fullWidth
                            />
                            <FormControlLabel
                                control={
                                    <Switch
                                        checked={formData.isPacte}
                                        onChange={(e) => setFormData(prev => ({ ...prev, isPacte: e.target.checked }))}
                                        color="primary"
                                    />
                                }
                                label="Je participe au Pacte enseignant"
                            />
                            <Button
                                variant="contained"
                                onClick={handleSubmit}
                                fullWidth
                                size="large"
                            >
                                Continuer
                            </Button>
                        </Box>
                    </Paper>
                </Container>
            );
        };

        const SessionList = ({ selectedDates, currentMonth }) => {
            return (
                <Box>
                    <Box sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 1, 
                        mb: 2,
                        position: 'sticky',
                        top: 0,
                        backgroundColor: 'background.paper',
                        zIndex: 1,
                        py: 1
                    }}>
                        <Typography variant="h6" sx={{ fontSize: { xs: '1rem', sm: '1.25rem' } }}>
                            Séances sélectionnées
                        </Typography>
                        <Box sx={{ 
                            backgroundColor: 'primary.main',
                            color: 'white',
                            borderRadius: '50%',
                            width: { xs: 20, sm: 24 },
                            height: { xs: 20, sm: 24 },
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontSize: { xs: '0.75rem', sm: '0.875rem' }
                        }}>
                            {selectedDates.length}
                        </Box>
                    </Box>
                    <Box sx={{ 
                        maxHeight: { xs: '200px', sm: '300px' }, 
                        overflowY: 'auto',
                        mb: 2
                    }}>
                        <List>
                            {selectedDates.map((date, index) => (
                                <ListItem key={date} sx={{ 
                                    bgcolor: 'primary.main',
                                    color: 'white',
                                    mb: 1,
                                    borderRadius: 1,
                                    py: { xs: 1, sm: 2 }
                                }}>
                                    <ListItemText
                                        primary={`Séance ${index + 1} - ${date} ${monthNames[currentMonth.getMonth()]}`}
                                        primaryTypographyProps={{
                                            sx: { fontSize: { xs: '0.875rem', sm: '1rem' } }
                                        }}
                                    />
                                </ListItem>
                            ))}
                        </List>
                    </Box>
                </Box>
            );
        };

        const App = () => {
            const [step, setStep] = React.useState(1);
            const [teacherInfo, setTeacherInfo] = React.useState(null);
            const [selectedDates, setSelectedDates] = React.useState([]);
            const [currentMonth, setCurrentMonth] = React.useState(new Date());

            const handleDateSelect = (date) => {
                setSelectedDates(prev => {
                    if (prev.includes(date)) {
                        return prev.filter(d => d !== date);
                    } else {
                        return [...prev, date].sort();
                    }
                });
            };

            const handleMonthChange = (delta) => {
                const newDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + delta, 1);
                setCurrentMonth(newDate);
            };

            const handleNext = () => {
                setStep(step + 1);
            };

            return (
                <Container maxWidth="md" sx={{ py: 4 }}>
                    {step === 1 && (
                        <TeacherInfo onSubmit={(info) => {
                            setTeacherInfo(info);
                            handleNext();
                        }} />
                    )}
                    {step === 2 && (
                        <Box>
                            <Typography variant="h4" gutterBottom sx={{ fontSize: { xs: '1.5rem', sm: '2.125rem' } }}>
                                Sélection des séances
                            </Typography>
                            <Typography variant="subtitle1" gutterBottom sx={{ fontSize: { xs: '0.875rem', sm: '1rem' } }}>
                                Sélectionnez les dates de vos séances
                            </Typography>
                            
                            <Grid container spacing={3}>
                                <Grid item xs={12} md={8}>
                                    <Box className="calendar-container">
                                        <Calendar
                                            selectedDates={selectedDates}
                                            onDateSelect={handleDateSelect}
                                            currentMonth={currentMonth}
                                            onMonthChange={handleMonthChange}
                                        />
                                    </Box>
                                </Grid>
                                <Grid item xs={12} md={4}>
                                    <Box sx={{ position: 'sticky', top: 20 }}>
                                        <SessionList
                                            selectedDates={selectedDates}
                                            currentMonth={currentMonth}
                                        />
                                        <Box sx={{ mt: 2 }}>
                                            <Button
                                                variant="contained"
                                                onClick={handleNext}
                                                disabled={selectedDates.length === 0}
                                                fullWidth
                                            >
                                                Suivant
                                            </Button>
                                        </Box>
                                    </Box>
                                </Grid>
                            </Grid>
                        </Box>
                    )}
                    {step === 3 && (
                        <Summary
                            teacherInfo={teacherInfo}
                            selectedDates={selectedDates}
                            currentMonth={currentMonth}
                        />
                    )}
                </Container>
            );
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>
